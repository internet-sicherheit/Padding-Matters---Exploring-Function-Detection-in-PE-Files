#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""extract_module_compiler_configuration.py: Extracts module names and compiler configurations from a DIA2Dump output file, generated by "Dia2Dump.exe <samplename>", and saves the information in a CSV file."""

# Imports
import sys
import re
import time
import pandas as pd

from operator import itemgetter

# Strings for module and compiler identfication
IDENTIFIER_ONE = "CompilandEnv   : obj = "
IDENTIFIER_TWO = "CompilandEnv   : cmd = "
IDENTIFIER_LINKER_MODULE = "* Linker *"

# Indices for sorting the results
SORT_BY_MODULE_NAME = 0
SORT_BY_COMPILER = 1

# Compiler optimization levels
#https://learn.microsoft.com/de-de/cpp/build/reference/o-options-optimize-code?view=msvc-170
COMPILER_OPTIMIZATION = {"O1","O2","Ob","Od","Og","Oi", "Os", "Ot", "Ox", "Oy"}

def update_progress_bar(progress_bar):
    """ Progress bar """
    print("\rProgress: [{0:10s}] {1:.1f}%".format('#' * int(progress_bar * 10), progress_bar*100), end="", flush=True)
    
def extract_functions_from_globals(file_path):
    """ Extracts module names and compiler configurationa from a DIA2Dump output file 
    and saves the output as csv file."""
    
    module_object_compiler = list()
    with open(file_path, 'r', encoding = "ISO-8859-1") as file:
        number_of_lines = len(file.readlines())
        file.seek(0)
        print("Opened", file_path,"...")
        
        module_object = None
        module_compiler = None

        for i, line in enumerate(file):
            if IDENTIFIER_ONE in line:
                module_object = line
            if IDENTIFIER_TWO in line:
                module_compiler = line
                if module_object != None and module_compiler != None and IDENTIFIER_LINKER_MODULE not in module_object :
                    module_object_compiler.append((module_object, 
                                                   module_compiler,
                                                   COMPILER_OPTIMIZATION.intersection(set(module_compiler.replace("-","").split(" ")))))
                module_object = None
                module_compiler = None
                
            update_progress_bar((i+1)/number_of_lines)
    file.close()
    
    module_object_compiler.sort(key=itemgetter(SORT_BY_MODULE_NAME))
    #print(*functions_globals, sep='\n')
    print("\nExtracted", len(module_object_compiler), "module and compiler configurations ...")
    
    df = pd.DataFrame(module_object_compiler)
    csv_data = df.to_csv("module_compiler_configuration.csv", encoding="ISO-8859-1", index=False, header=False)
    print("Saved under module_compiler_configuration.csv ...")
    
def main():
    """ Main program """
    print("------------------------------------------------")
    if len(sys.argv)!= 2:
        print("Usage: python3 extract_module_compiler_configuration.py PATH/TO/DIA2DUMP.txt")
        return -1
    extract_functions_from_globals(sys.argv[1])
    print("Done!")
    print("------------------------------------------------")
    return 0

if __name__ == "__main__":
    main()
